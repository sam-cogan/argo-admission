name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'demo-app/**'
      - 'admission-controller/**'
      - '.github/workflows/docker-build.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'demo-app/**'
      - 'admission-controller/**'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component:
          - name: demo-app
            context: ./demo-app
            image: argo-demo-app
            description: Demo Node.js application for Argo CD deployment
            test: true
          - name: admission-controller
            context: ./admission-controller
            image: argo-admission-controller
            description: Kubernetes admission controller for Argo CD
            test: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ matrix.component.image }}
          org.opencontainers.image.description=${{ matrix.component.description }}
          org.opencontainers.image.vendor=Argo CD Demo

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component.context }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=${{ matrix.component.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.component.name }}

    - name: Output image information
      if: github.event_name != 'pull_request'
      run: |
        echo "üê≥ Docker image for ${{ matrix.component.name }} has been built and pushed!"
        echo "üìã Image tags:"
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          echo "  ‚Ä¢ $tag"
        done
        echo ""
        if [ "${{ matrix.component.name }}" = "demo-app" ]; then
          echo "üîß To update your Kubernetes deployment:"
          LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep ":latest" || echo "${{ steps.meta.outputs.tags }}" | head -1)
          echo "  kubectl set image deployment/demo-app demo-app=$LATEST_TAG -n demo"
          echo ""
          echo "üìù Or update your Argo CD application manifest to use:"
          echo "  image: $LATEST_TAG"
        elif [ "${{ matrix.component.name }}" = "admission-controller" ]; then
          echo "üîß To update the admission controller deployment:"
          LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep ":latest" || echo "${{ steps.meta.outputs.tags }}" | head -1)
          echo "  kubectl set image deployment/admission-controller admission-controller=$LATEST_TAG -n admission-controller"
        fi

    - name: Test demo-app Docker image
      if: matrix.component.test && github.event_name == 'pull_request'
      run: |
        # Pull the built image for testing
        TEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        docker pull $TEST_TAG
        
        # Run the image
        docker run -d -p 3000:3000 --name test-app $TEST_TAG
        
        # Wait for the app to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Test ready endpoint
        curl -f http://localhost:3000/ready || exit 1
        
        # Test main endpoint
        curl -f http://localhost:3000/ || exit 1
        
        # Test API endpoint
        curl -f http://localhost:3000/api/info || exit 1
        
        # Cleanup
        docker stop test-app
        docker rm test-app

    - name: Test admission-controller Docker image
      if: matrix.component.name == 'admission-controller' && github.event_name == 'pull_request'
      run: |
        # Pull the built image for testing
        TEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        docker pull $TEST_TAG
        
        # Run a basic container test (just verify it starts and has the binary)
        docker run --rm $TEST_TAG ls -la /root/admission-controller || exit 1
        
        echo "‚úÖ Admission controller image test passed"

    # Optional: Auto-update manifests (commented out by default)
    # - name: Update Kubernetes manifests
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep ":latest")
    #     if [ "${{ matrix.component.name }}" = "demo-app" ]; then
    #       sed -i "s|image: ghcr.io.*/argo-demo-app.*|image: $LATEST_TAG|g" manifests/*/deployment.yaml
    #     elif [ "${{ matrix.component.name }}" = "admission-controller" ]; then
    #       sed -i "s|image: ghcr.io.*/argo-admission-controller.*|image: $LATEST_TAG|g" admission-controller/manifests/deployment.yaml
    #     fi
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add manifests/*/deployment.yaml admission-controller/manifests/deployment.yaml || true
    #     git commit -m "Update ${{ matrix.component.name }} image to $LATEST_TAG" || exit 0
    #     git push